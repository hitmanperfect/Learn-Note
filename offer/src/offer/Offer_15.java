package offer;

/**
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量).）。
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的示例 3中，输入表示有符号整数 -3。
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：n = 11 (控制台输入 00000000000000000000000000001011)
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011中，共有三位为 '1'。
 * 示例 2：
 * <p>
 * 输入：n = 128 (控制台输入 00000000000000000000000010000000)
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000中，共有一位为 '1'。
 * 示例 3：
 * <p>
 * 输入：n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 输入必须是长度为 32 的 二进制串 。
 * <p>
 * <p>
 * 注意：本题与主站 191 题相同：https://leetcode-cn.com/problems/number-of-1-bits/
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class Offer_15 {
    /**
     * 知识点：Java 中没有无符号数，所有的int 类型都是有符号的，即 int 取值范围是 -2的31次方 到 2的31次方-1
     * 即 从 0x 8000 0000 到 0x 7fff ffff ,
     *
     * 计算机中是以补码表示数的，正数的补码和原码相同，负数的补码计算方式为，符号位不变，数值位取反+1
     * 举例， -3 的补码中，有31位 1，-8 中有 29位 1。
     *
     * 以8位2进制为例，第7位为符号位，-1 为 1000，0001 ，其补码为 1111，1111 （等同于无符号的255），
     * 用补码可以正常的标识加减计算，只不过高位溢出，在8位表示下，是符合我们的计算结果的。
     * -1 + 1 = 0，表示为 0000，0000
     * -1 + 2 = 1，表示为 0000，0001，
     * */
    public int hammingWeight(int n) {
	  int count = 0;
	  while (n != 0) {
	      n = n & n - 1;
		count++;
	  }
	  return count;
    }

    public static void main(String[] args) {
	  Offer_15 test =
		    new Offer_15();
	  System.out.println(test.hammingWeight(3));
	  System.out.println(test.hammingWeight(-8));
    }
}
